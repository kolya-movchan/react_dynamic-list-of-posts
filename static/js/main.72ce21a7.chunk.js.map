{"version":3,"sources":["types/enums/Errors.tsx","components/Loader/Loader.tsx","components/PostDetails.tsx","components/UserSelector.tsx","components/PostList.tsx","utils/fetchClient.ts","api/comment.tsx","api/post.tsx","components/NewCommentForm.tsx","App.tsx","api/user.tsx","index.tsx"],"names":["ServerErrors","FormErrors","Loader","className","PostDetails","activePost","comments","AreCommentsLoading","error","isFormRequested","isRetryLoading","onFormRequest","onDelete","onRetry","setError","id","title","successfulLoad","body","Comments","type","onClick","length","map","commentator","href","email","name","UserSelector","users","activeUser","onOpeningPosts","useState","isActive","setIsActive","classNames","onBlur","event","parentContainer","currentTarget","parentElement","requestAnimationFrame","contains","document","activeElement","role","user","PostList","posts","onOpeningPostDetails","post","isPostActive","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","getComments","removeComment","getPosts","NewCommentForm","isFormLoading","onNameChange","onTextAreaChange","onSubmit","onReset","validateError","value","errorTriangle","errorMessage","message","htmlFor","placeholder","content","onChange","Name","Email","TextArea","App","setActiveUser","setActivePost","setUsers","setPosts","setComments","isPostLoading","setIsPostLoading","setIsFormRequested","setAreCommentsLoading","setIsFormLoading","setIsRetryLoading","initialFormField","errorFormField","setName","setEmail","setBody","postId","commentToAdd","setCommentToAdd","commentIdOnDelete","setCommentIdOnDelete","userOrPostError","Users","Posts","fetchUsers","a","usersFromServer","fetchPosts","postsFromServer","fetchCommentsByPostId","commentsFromServer","postComment","comment","newComment","NewComment","deleteComment","filter","CommentDeletion","useEffect","commentID","inputName","target","updatedData","preventDefault","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.72ce21a7.chunk.js","sourcesContent":["export enum ServerErrors {\n  Users = 'Unable to load users from the Server',\n  Posts = 'Ooops, Unable to load posts from the Server',\n  Comments = 'Ooops, Unable to load comments from the Server',\n  // eslint-disable-next-line max-len\n  NewComment = 'Ooops, your comment has just failed to be published. Please, try again',\n  // eslint-disable-next-line max-len\n  CommentDeletion = 'Failed to delete the comment, please retry in a few seconds',\n}\n\nexport enum FormErrors {\n  Name = 'Name is required',\n  Email = 'Email is required',\n  TextArea = 'Enter some text',\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { Dispatch, SetStateAction } from 'react';\nimport '../stylesExtra/extraErrors.scss';\n\nimport { Loader } from './Loader';\n\nimport { ServerErrors } from '../types/enums/Errors';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  activePost: Post | null,\n  comments: Comment[],\n  error: ServerErrors | null,\n  AreCommentsLoading: boolean,\n  isFormRequested: boolean\n  isRetryLoading: boolean,\n  onFormRequest: Dispatch<SetStateAction<boolean>>,\n  onDelete: (id: number) => void,\n  onRetry: () => void,\n  setError: Dispatch<SetStateAction<ServerErrors | null>>,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  activePost,\n  comments,\n  AreCommentsLoading,\n  error,\n  isFormRequested,\n  isRetryLoading,\n  onFormRequest,\n  onDelete,\n  onRetry,\n  setError,\n}) => {\n  const { id, title } = activePost as Post;\n  const successfulLoad = !AreCommentsLoading && !error;\n\n  return (\n    <>\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${id}: ${title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">{activePost?.body}</p>\n      </div>\n\n      <div className=\"block\">\n        {AreCommentsLoading && <Loader /> }\n\n        {error && (\n          <div\n            className=\"notification is-danger\"\n            data-cy=\"CommentsError\"\n          >\n            {error}\n\n            {error !== ServerErrors.Comments && (\n              <button\n                type=\"button\"\n                className=\"button button-retry\"\n                onClick={onRetry}\n              >\n                Try again\n              </button>\n            )}\n\n            <button\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => setError(null)}\n            >\n              delete button\n            </button>\n          </div>\n        )}\n\n        {isRetryLoading && <Loader />}\n\n        {successfulLoad && (\n          !comments.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(commentator => {\n                return (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={commentator.id}\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${commentator.email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {commentator.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => onDelete(commentator.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {commentator.body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )\n        )}\n\n        {(successfulLoad && !isFormRequested) && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => onFormRequest(true)}\n          >\n            Write a comment\n          </button>\n        )}\n      </div>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  activeUser: User | null,\n  onOpeningPosts: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  activeUser,\n  onOpeningPosts,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  const handleDropDownBlur = (event: React.FocusEvent<HTMLButtonElement>) => {\n    const parentContainer = event.currentTarget.parentElement?.parentElement;\n\n    requestAnimationFrame(() => {\n      if (!parentContainer?.contains(document.activeElement)) {\n        setIsActive(false);\n      }\n    });\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        {\n          'is-active': isActive,\n        },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n          onBlur={handleDropDownBlur}\n        >\n          <span>{activeUser ? activeUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {users.length > 0 && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => {\n              return (\n                <a\n                  key={user.id}\n                  href={`#user-${user.id}`}\n                  className={classNames(\n                    'dropdown-item',\n                    {\n                      'is-active': activeUser && (activeUser.id === user.id),\n                    },\n                  )}\n                  onClick={() => {\n                    onOpeningPosts(user);\n                    setIsActive(false);\n                  }}\n                >\n                  {user.name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport classNames from 'classnames';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  activePost: Post | null,\n  onOpeningPostDetails: (post: Post) => void,\n};\n\nexport const PostList: React.FC<Props> = ({\n  posts,\n  activePost,\n  onOpeningPostDetails,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n            const isPostActive = activePost?.id === id;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n                <td data-cy=\"PostTitle\">{title}</td>\n                <td className=\"has-text-right is-vcentered\">\n\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button is-link',\n                      {\n                        'is-light': !isPostActive,\n                      },\n                    )}\n                    onClick={() => onOpeningPostDetails(post)}\n                  >\n                    {isPostActive ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: T | null = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: T) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: T) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = (id: number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const addComment = (data: Comment) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const removeComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { FormErrors } from '../types/enums/Errors';\nimport { FormField } from '../types/FormField';\n\ntype Props = {\n  name: FormField,\n  email: FormField,\n  body: FormField,\n  isFormLoading: boolean,\n  onNameChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  onTextAreaChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n  onSubmit: (event: React.FormEvent) => void,\n  onReset: (event: React.FormEvent) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  name,\n  email,\n  body,\n  isFormLoading,\n  onNameChange,\n  onTextAreaChange,\n  onSubmit,\n  onReset,\n}) => {\n  const validateError = (value: FormField) => {\n    return classNames(\n      'input',\n      {\n        'is-danger': value.error,\n      },\n    );\n  };\n\n  const errorTriangle = (\n    <span\n      className=\"icon is-small is-right has-text-danger\"\n      data-cy=\"ErrorIcon\"\n    >\n      <i className=\"fas fa-exclamation-triangle\" />\n    </span>\n  );\n\n  const errorMessage = (message: string) => (\n    <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n      {message}\n    </p>\n  );\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={name.content}\n            className={validateError(name)}\n            onChange={onNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {name.error && errorTriangle}\n        </div>\n\n        {name.error && errorMessage(FormErrors.Name)}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={email.content}\n            className={validateError(email)}\n            onChange={onNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {email.error && errorTriangle}\n        </div>\n\n        {email.error && errorMessage(FormErrors.Email)}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={body.content}\n            placeholder=\"Type comment here\"\n            className={validateError(body)}\n            onChange={onTextAreaChange}\n          />\n        </div>\n\n        {body.error && errorMessage(FormErrors.TextArea)}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              {\n                'is-loading': isFormLoading,\n              },\n            )}\n            onClick={onSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={onReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport classNames from 'classnames';\nimport 'bulma/bulma.sass';\nimport './App.scss';\n\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { PostList } from './components/PostList';\nimport { Loader } from './components/Loader';\n\nimport { addComment, getComments, removeComment } from './api/comment';\nimport { getPosts } from './api/post';\nimport { getUsers } from './api/user';\n\nimport { FormField } from './types/FormField';\nimport { ServerErrors } from './types/enums/Errors';\nimport { Comment } from './types/Comment';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { NewCommentForm } from './components/NewCommentForm';\n\nexport const App: React.FC = () => {\n  const [activeUser, setActiveUser] = useState<User | null>(null);\n  const [activePost, setActivePost] = useState<Post | null>(null);\n  const [error, setError] = useState<ServerErrors | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const [isPostLoading, setIsPostLoading] = useState(false);\n  const [isFormRequested, setIsFormRequested] = useState(false);\n  const [AreCommentsLoading, setAreCommentsLoading] = useState(false);\n  const [isFormLoading, setIsFormLoading] = useState(false);\n  const [isRetryLoading, setIsRetryLoading] = useState(false);\n\n  const initialFormField = {\n    content: '',\n    error: false,\n  };\n\n  const errorFormField = {\n    content: '',\n    error: true,\n  };\n\n  const [name, setName] = useState<FormField>(initialFormField);\n  const [email, setEmail] = useState<FormField>(initialFormField);\n  const [body, setBody] = useState<FormField>(initialFormField);\n\n  const initialComment = {\n    id: 0,\n    postId: 0,\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [commentToAdd, setCommentToAdd] = useState<Comment>(initialComment);\n  const [commentIdOnDelete, setCommentIdOnDelete] = useState(0);\n\n  const userOrPostError = (\n    error === ServerErrors.Users || error === ServerErrors.Posts\n  );\n\n  const fetchUsers = async () => {\n    setError(null);\n\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      setError(ServerErrors.Users);\n    }\n  };\n\n  const fetchPosts = async (id: number) => {\n    setIsPostLoading(true);\n    setError(null);\n\n    try {\n      const postsFromServer: Post[] = await getPosts(id);\n\n      setPosts(postsFromServer);\n    } catch {\n      setError(ServerErrors.Posts);\n    } finally {\n      setIsPostLoading(false);\n    }\n  };\n\n  const fetchCommentsByPostId = async (id: number) => {\n    setAreCommentsLoading(true);\n    setError(null);\n\n    try {\n      const commentsFromServer: Comment[] = await getComments(id);\n\n      setComments(commentsFromServer);\n    } catch {\n      setError(ServerErrors.Comments);\n    } finally {\n      setAreCommentsLoading(false);\n    }\n  };\n\n  const postComment = async (comment: Comment) => {\n    setIsFormLoading(true);\n\n    try {\n      const newComment = await addComment(comment);\n\n      setComments([...comments, newComment]);\n      setBody(initialFormField);\n    } catch {\n      setError(ServerErrors.NewComment);\n    } finally {\n      setIsFormLoading(false);\n      setIsRetryLoading(false);\n    }\n  };\n\n  const deleteComment = async (id: number) => {\n    try {\n      setComments(comments.filter(comment => comment.id !== id));\n\n      await removeComment(id);\n    } catch {\n      setError(ServerErrors.CommentDeletion);\n      setComments(comments);\n    } finally {\n      setIsRetryLoading(false);\n    }\n  };\n\n  const handleSelectedUser = (user: User) => {\n    if (activeUser && user.id === activeUser.id) {\n      return;\n    }\n\n    fetchPosts(user.id);\n\n    setActiveUser(user);\n    setActivePost(null);\n  };\n\n  const handleSelectedPost = (post: Post) => {\n    if (post.id === activePost?.id) {\n      setActivePost(null);\n\n      return;\n    }\n\n    fetchCommentsByPostId(post.id);\n\n    setActivePost(post);\n    setIsFormRequested(false);\n    setName(initialFormField);\n    setEmail(initialFormField);\n  };\n\n  const handleInputContacts = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const inputName = event.target.name;\n    const inputValue = event.target.value;\n\n    const updatedData = {\n      content: inputValue,\n      error: false,\n    };\n\n    switch (inputName) {\n      case 'name':\n        setName(updatedData);\n\n        break;\n\n      case 'email':\n        setEmail(updatedData);\n        break;\n\n      default: break;\n    }\n  };\n\n  const handleInputTextArea = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setBody({\n      content: event.target.value,\n      error: false,\n    });\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!name.content) {\n      setName(errorFormField);\n    }\n\n    if (!email.content) {\n      setEmail(errorFormField);\n    }\n\n    if (!body.content) {\n      setBody(errorFormField);\n    }\n\n    if (!name.content || !email.content || !body.content) {\n      return;\n    }\n\n    if (activePost) {\n      const newComment = {\n        id: 0,\n        postId: activePost.id,\n        name: name.content,\n        email: email.content,\n        body: body.content,\n      };\n\n      postComment(newComment);\n\n      setCommentToAdd(newComment);\n      setError(null);\n    }\n  };\n\n  const resetFormFields = (event: React.FormEvent<Element>) => {\n    event.preventDefault();\n\n    setName(initialFormField);\n    setEmail(initialFormField);\n    setBody(initialFormField);\n  };\n\n  const handleCommentDeletion = (commentID: number) => {\n    deleteComment(commentID);\n\n    setCommentIdOnDelete(commentID);\n  };\n\n  const handleRetryAddOrDelete = () => {\n    setIsRetryLoading(true);\n    setError(null);\n\n    if (error === ServerErrors.NewComment) {\n      postComment(commentToAdd);\n    } else if (error === ServerErrors.CommentDeletion) {\n      deleteComment(commentIdOnDelete);\n    }\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  activeUser={activeUser}\n                  onOpeningPosts={handleSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!activeUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isPostLoading && <Loader />}\n\n                {(error && userOrPostError) && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {error}\n                  </div>\n                )}\n\n                {(activeUser && !posts.length && !isPostLoading && !error) && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {(posts.length > 0 && !isPostLoading) && (\n                  <PostList\n                    posts={posts}\n                    activePost={activePost}\n                    onOpeningPostDetails={handleSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': activePost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n\n              {activePost && (\n                <div className=\"content\" data-cy=\"PostDetails\">\n                  <div className=\"content\" data-cy=\"PostDetails\">\n                    <PostDetails\n                      activePost={activePost}\n                      comments={comments}\n                      error={error}\n                      AreCommentsLoading={AreCommentsLoading}\n                      isFormRequested={isFormRequested}\n                      isRetryLoading={isRetryLoading}\n                      onFormRequest={setIsFormRequested}\n                      onDelete={handleCommentDeletion}\n                      onRetry={handleRetryAddOrDelete}\n                      setError={setError}\n                    />\n\n                    {isFormRequested && (\n                      <NewCommentForm\n                        name={name}\n                        email={email}\n                        body={body}\n                        isFormLoading={isFormLoading}\n                        onNameChange={handleInputContacts}\n                        onTextAreaChange={handleInputTextArea}\n                        onSubmit={handleFormSubmit}\n                        onReset={resetFormFields}\n                      />\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}